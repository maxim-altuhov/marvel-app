{"version":3,"sources":["components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearch/CharSearch.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/img/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["ErrorBoundary","state","error","errorInfo","this","setState","ErrorMessage","props","children","Component","View","data","name","description","thumbnail","homepage","wiki","noImgStyle","includes","objectFit","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","process","setProcess","getCharacter","clearError","updateChar","id","Math","floor","random","then","onCharLoaded","useEffect","setContent","onClick","mjolnir","CharList","getAllCharacters","baseLimit","baseOffset","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","a","ended","length","refArray","useRef","focusOnElem","current","forEach","elem","classList","remove","add","focus","elements","useMemo","Spinner","Error","list–°haracters","map","i","objectPosition","tabIndex","ref","onCharSelected","onKeyPress","e","key","renderList","disabled","display","comics","comicsList","comicsID","resourceURI","match","push","to","CharInfo","charID","CharSearch","getCharacterByName","errorMessage","results","initialValues","charName","validationSchema","object","string","min","required","onSubmit","htmlFor","type","placeholder","component","MainPage","selectedID","setSelectedID","Helmet","content","decoration","errorImg","width","height","margin","useHttp","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","_apiBase","_apiKey","_transformCharacter","path","extension","urls","items","_transformComics","title","price","prices","pageCount","language","textObjects","limit","res","getAllComics","getComics","baseLimitForComics","Skeleton"],"mappings":"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","file":"static/js/6.293e0aa6.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({ error: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const { process, setProcess, getCharacter, clearError } = useMarvelService();\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n  const noImgStyle = thumbnail.includes('image_not_available') ? { objectFit: 'contain' } : {};\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={noImgStyle} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner />;\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />;\n    case 'confirmed':\n      return <Component />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nconst CharList = (props) => {\n  const { process, setProcess, getAllCharacters, baseLimit, baseOffset } = useMarvelService();\n\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(baseOffset);\n  const [charEnded, setCharEnded] = useState(false);\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharListLoaded = async (newCharList) => {\n    let ended = false;\n    if (newCharList.length < baseLimit) ended = true;\n\n    setCharList([...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset(offset + baseLimit);\n    setCharEnded(ended);\n  };\n\n  const refArray = useRef([]);\n\n  const focusOnElem = (id) => {\n    refArray.current.forEach((elem) => elem.classList.remove('char__item_selected'));\n    refArray.current[id].classList.add('char__item_selected');\n    refArray.current[id].focus();\n  };\n\n  const renderList = (charList) => {\n    const list–°haracters = charList.map((elem, i) => {\n      const { name, thumbnail, id } = elem;\n      const noImgStyle = thumbnail.includes('image_not_available')\n        ? { objectPosition: 'top', objectFit: 'fill' }\n        : {};\n\n      return (\n        <li\n          className=\"char__item\"\n          tabIndex=\"0\"\n          ref={(elem) => (refArray.current[i] = elem)}\n          onClick={() => {\n            props.onCharSelected(id);\n            focusOnElem(i);\n          }}\n          onKeyPress={(e) => {\n            if (e.key === ' ' || e.key === 'Enter') {\n              props.onCharSelected(id);\n              focusOnElem(i);\n            }\n          }}\n        >\n          <img src={thumbnail} alt={name} style={noImgStyle} />\n          <div className=\"char__name\">{name}</div>\n        </li>\n      );\n    });\n\n    return <ul className=\"char__grid\">{list–°haracters}</ul>;\n  };\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderList(charList), newItemLoading);\n    // eslint-disable-next-line\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        disabled={newItemLoading}\n        style={{ display: charEnded ? 'none' : 'block' }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n  const { process, setProcess, getCharacter, clearError } = useMarvelService();\n\n  const updateChar = () => {\n    const { charID } = props;\n\n    if (!charID) return;\n\n    clearError();\n    getCharacter(charID)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.charID]);\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n  const maxComics = 10;\n\n  const noImgStyle = thumbnail.includes('image_not_available') ? { objectFit: 'contain' } : {};\n  let comicsList = [];\n\n  for (let i = 0; i < comics.length; i++) {\n    if (i >= maxComics) break;\n\n    const comicsID = comics[i].resourceURI.match(/\\d{2,}/g)[0];\n\n    comicsList.push(\n      <li key={i} className=\"char__comics-item\">\n        {comicsID ? (\n          <Link to={`/comics/${comicsID}`}>{comics[i].name}</Link>\n        ) : (\n          <span>{comics[i].name}</span>\n        )}\n      </li>,\n    );\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={noImgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comicsList.length > 0 ? comicsList : 'There is no comics about this character.'}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charID: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport { object, string } from 'yup';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charSearch.scss';\r\n\r\nconst CharSearch = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { process, setProcess, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (charName) => {\r\n    clearError();\r\n\r\n    getCharacterByName(charName)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess('confirmed'));\r\n  };\r\n\r\n  const errorMessage =\r\n    process === 'error' ? (\r\n      <div className=\"char__search-critical-error\">{setContent('error')}</div>\r\n    ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n      <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{ charName: '' }}\r\n        validationSchema={object({\r\n          charName: string().min(2, 'Min 2 symbols').required('This field is required'),\r\n        })}\r\n        onSubmit={({ charName }) => updateChar(charName)}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\r\n            <button type=\"submit\" className=\"button button__main\" disabled={process === 'loading'}>\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n        </Form>\r\n      </Formik>\r\n      {errorMessage}\r\n      {results}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearch;\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharSearch from '../charSearch/CharSearch';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedID, setSelectedID] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setSelectedID(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charID={selectedID} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearch />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import errorImg from './img/error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      src={errorImg}\r\n      alt=\"Error\"\r\n      style={{\r\n        display: 'block',\r\n        width: '250px',\r\n        height: '250px',\r\n        objectFit: 'contain',\r\n        margin: '0 auto',\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useCallback } from 'react';\r\n\r\nconst useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(\r\n    async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n      setProcess('loading');\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess('error');\r\n        throw e;\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  const clearError = useCallback(() => setProcess('loading'), []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n\r\nexport default useHttp;\r\n","import useHttp from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=e2f258598bf2326923fd80f90969ebb1';\r\n  const baseOffset = 120;\r\n  const baseLimit = 9;\r\n  const baseLimitForComics = 8;\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description || 'There is no data about this character.',\r\n      thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : 'No information about the number of pages',\r\n      language: comics.textObjects.language || 'en-us',\r\n    };\r\n  };\r\n\r\n  const getAllCharacters = async (offset = baseOffset, limit = baseLimit) => {\r\n    const res = await request(`${_apiBase}characters?limit=${limit}&offset=${offset}&${_apiKey}`);\r\n\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = baseOffset, limit = baseLimitForComics) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=${limit}&offset=${offset}&${_apiKey}`,\r\n    );\r\n\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComics = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  return {\r\n    process,\r\n    baseLimit,\r\n    baseLimitForComics,\r\n    baseOffset,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    getAllComics,\r\n    getComics,\r\n    clearError,\r\n    setProcess,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">Please select a character to see information</p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"sourceRoot":""}