{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useMarvelService","setProcess","getAllComics","baseLimitForComics","baseOffset","useState","comicsList","setComicsList","offset","setOffset","newComicsLoading","setNewComicsLoading","comicsEnded","setComicsEnded","useEffect","onRequest","initial","then","onComicsLoaded","newComicsList","ended","length","className","listWithComics","map","comics","i","title","thumbnail","id","price","to","src","alt","renderComicsList","onClick","disabled","style","display","ComicsPage","Helmet","name","content","AppBanner","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"6NASMA,EAAa,SAACC,EAASC,EAAWC,GACtC,OAAQF,GACN,IAAK,UACH,OAAO,cAACG,EAAA,EAAD,IACT,IAAK,UACH,OAAOD,EAAiB,cAACD,EAAD,IAAgB,cAACE,EAAA,EAAD,IAC1C,IAAK,YACH,OAAO,cAACF,EAAD,IACT,IAAK,QACH,OAAO,cAACG,EAAA,EAAD,IACT,QACE,MAAM,IAAIC,MAAM,8BAqEPC,EAjEI,WACjB,MAA8EC,cAAtEP,EAAR,EAAQA,QAASQ,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,aAAcC,EAA3C,EAA2CA,mBAAoBC,EAA/D,EAA+DA,WAC/D,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAASD,GAArC,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAgDJ,oBAAS,GAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAAsCN,oBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACRC,EAAUP,GAAQ,KAEjB,IAEH,IAAMO,EAAY,SAACP,EAAQQ,GACfL,GAAVK,GACAd,EAAaM,GACVS,KAAKC,GACLD,MAAK,kBAAMhB,EAAW,iBAGrBiB,EAAiB,SAACC,GACtB,IAAIC,GAAQ,EAERD,EAAcE,OAASlB,IACzBiB,GAAQ,GAGVb,EAAc,GAAD,mBAAKD,GAAL,YAAoBa,KACjCR,GAAoB,GACpBF,EAAUD,EAASL,GACnBU,EAAeO,IAqBjB,OACE,sBAAKE,UAAU,eAAf,UACG9B,EAAWC,GAAS,kBApBA,SAACa,GACxB,IAAMiB,EAAiBjB,EAAWkB,KAAI,SAACC,EAAQC,GAC7C,IAAQC,EAAgCF,EAAhCE,MAAOC,EAAyBH,EAAzBG,UAAWC,EAAcJ,EAAdI,GAAIC,EAAUL,EAAVK,MAE9B,OACE,oBAAIR,UAAU,eAAd,SACE,eAAC,IAAD,CAAMS,GAAE,kBAAaF,GAArB,UACE,qBAAKG,IAAKJ,EAAWK,IAAKN,EAAOL,UAAU,qBAC3C,qBAAKA,UAAU,oBAAf,SAAoCK,IACpC,qBAAKL,UAAU,qBAAf,SAAqCQ,QAJPJ,MAUtC,OAAO,oBAAIJ,UAAU,eAAd,SAA8BC,IAKRW,CAAiB5B,KAAaI,GACzD,wBACEY,UAAU,mCACVa,QAAS,kBAAMpB,EAAUP,IACzB4B,SAAU1B,EACV2B,MAAO,CAAEC,QAAS1B,EAAc,OAAS,SAJ3C,SAME,qBAAKU,UAAU,QAAf,SAAwBZ,EAAmB,aAAe,oB,QCjEnD6B,UAbI,WACjB,OACE,qCACE,eAACC,EAAA,EAAD,WACE,sBAAMC,KAAK,cAAcC,QAAQ,iCACjC,mDAEF,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,S,wFCTS,SAASC,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE","file":"static/js/7.5baaed8e.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner />;\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />;\n    case 'confirmed':\n      return <Component />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nconst ComicsList = () => {\n  const { process, setProcess, getAllComics, baseLimitForComics, baseOffset } = useMarvelService();\n  const [comicsList, setComicsList] = useState([]);\n  const [offset, setOffset] = useState(baseOffset);\n  const [newComicsLoading, setNewComicsLoading] = useState(false);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewComicsLoading(false) : setNewComicsLoading(true);\n    getAllComics(offset)\n      .then(onComicsLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onComicsLoaded = (newComicsList) => {\n    let ended = false;\n\n    if (newComicsList.length < baseLimitForComics) {\n      ended = true;\n    }\n\n    setComicsList([...comicsList, ...newComicsList]);\n    setNewComicsLoading(false);\n    setOffset(offset + baseLimitForComics);\n    setComicsEnded(ended);\n  };\n\n  const renderComicsList = (comicsList) => {\n    const listWithComics = comicsList.map((comics, i) => {\n      const { title, thumbnail, id, price } = comics;\n\n      return (\n        <li className=\"comics__item\" key={i}>\n          <Link to={`/comics/${id}`}>\n            <img src={thumbnail} alt={title} className=\"comics__item-img\" />\n            <div className=\"comics__item-name\">{title}</div>\n            <div className=\"comics__item-price\">{price}</div>\n          </Link>\n        </li>\n      );\n    });\n\n    return <ul className=\"comics__grid\">{listWithComics}</ul>;\n  };\n\n  return (\n    <div className=\"comics__list\">\n      {setContent(process, () => renderComicsList(comicsList), newComicsLoading)}\n      <button\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n        disabled={newComicsLoading}\n        style={{ display: comicsEnded ? 'none' : 'block' }}\n      >\n        <div className=\"inner\">{newComicsLoading ? 'loading...' : 'load more'}</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import { Helmet } from 'react-helmet';\r\n\r\nimport ComicsList from '../comicsList/ComicsList';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Page with list of our comics\" />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}